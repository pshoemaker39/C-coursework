The program below makes two child threads: a guessing thread and an
answering thread. It uses 3 global integers, 1 pthread_mutex_t, and 2 pthread_cond_t
turn: Tells whose turn it is, either ANSWERER_TURN or GUESSER_TURN.
guess: Holds the most recent guess generated by the guessing thread.
shouldContinue: Holds 1 while the program should continue (the guesser
does not have the correct number). Holds 0 after the guesser guesses the
correct number.
lock: a pthread_mutex_t variable.
guessersTurn: a pthread_cond_t variable.
answerersTurn: a pthread_cond_t variable.

Is the answer 8?
Sorry, the answer is not 8
Is the answer 7?
Congratulations! The answer is 7
Please finish the program.
One child thread should run answerer(), the other should run guesser().
The two threads should take turns: the guessing thread should make a
guess and then the answering thread should compare it with answer (a
local variable that only it has).
If the guesser got the wrong number, then the guesser should go again.
Etc.
I have finished main(), which has initializes all objects. Please finish answerer()
and guesser(). The vPtr argument is NULL and may be ignored. However, please
figure out:
What needs to be protected.
Where should the locks and unlock go?.
Where should conditions and signals go.


/*
 * guesser.c Joseph Phillips
 */
#include <stdlib.h>
#include <stdio.h>
#include <pthread.h>
#define ANSWERER_TURN 0
#define GUESSER_TURN 1
int turn = GUESSER_TURN;
int guess = -1;
int shouldContinue = 1;
pthread_mutex_t lock;
pthread_cond_t guessersTurn;
pthread_cond_t answerersTurn;
void* answerer (void* vPtr)
{
 int answer = rand() % 32;
 printf("(Don't tell, but the answer is %d)\n",answer);
 while (1)
 {
(a) YOUR CODE HERE
 while (turn != ANSWERER_TURN)
 {
(b) YOUR CODE HERE
 }
 if (guess == answer)
 {
 printf("Congratulations! The answer is %d\n",answer);
 shouldContinue = 0;


 turn = GUESSER_TURN;
(c) YOUR CODE HERE
(d) YOUR CODE HERE
 break;
 }
 else
 printf("Sorry, the answer is not %d\n",guess);
 turn = GUESSER_TURN;
(e) YOUR CODE HERE
(f) YOUR CODE HERE
 }
 return(NULL);
}
void* guesser (void* vPtr)
{
 while (1)
 {
(g) YOUR CODE HERE
 while (turn != GUESSER_TURN)
 {
(h) YOUR CODE HERE
 }
 if ( !shouldContinue )
 break;
 guess = rand() % 32;
 printf("Is the answer %d?\n",guess);
 turn = ANSWERER_TURN;
(i) YOUR CODE HERE
(j) YOUR CODE HERE
 }
 return(NULL);
}
int main ()
{
 pthread_t answererId;
 pthread_t guesserId;
 pthread_mutex_init(&lock,NULL);
 pthread_cond_init(&answerersTurn,NULL);
 pthread_cond_init(&guessersTurn,NULL);
 pthread_create(&answererId,NULL,answerer,NULL);
 pthread_create(&guesserId, NULL,guesser, NULL);
 pthread_join(answererId,NULL);
 pthread_join(guesserId,NULL);
 pthread_mutex_destroy(&lock);
 pthread_cond_destroy(&answerersTurn);
 pthread_cond_destroy(&guessersTurn);
}